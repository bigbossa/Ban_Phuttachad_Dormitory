import { supabase } from "@/integrations/supabase/client";

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö system_settings
 */
export const syncRoomPricesWithSystemSettings = async () => {
  try {
    console.log("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á...");

    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• system_settings
    const { data: settingsData, error: settingsError } = await supabase
      .from("system_settings")
      .select("deposit_rate")
      .order("created_at", { ascending: false })
      .limit(1);

    if (settingsError) {
      console.error("‚ùå Error fetching system settings:", settingsError);
      return { success: false, error: settingsError.message };
    }

    if (!settingsData || settingsData.length === 0) {
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• system_settings");
      return { success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• system_settings" };
    }

    const systemDepositRate = settingsData[0].deposit_rate;
    console.log(`üìä ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å system_settings: ${systemDepositRate} ‡∏ö‡∏≤‡∏ó`);

    // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const { data: roomsData, error: roomsError } = await supabase
      .from("rooms")
      .select("id, room_number, price")
      .order("room_number", { ascending: true });

    if (roomsError) {
      console.error("‚ùå Error fetching rooms:", roomsError);
      return { success: false, error: roomsError.message };
    }

    console.log(`üè† ‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${roomsData?.length || 0} ‡∏´‡πâ‡∏≠‡∏á`);

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö system_settings
    const roomsToUpdate = (roomsData || []).filter(
      (room) => room.price !== systemDepositRate
    );

    if (roomsToUpdate.length === 0) {
      console.log("‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö system_settings ‡πÅ‡∏•‡πâ‡∏ß");
      return {
        success: true,
        message: "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö system_settings ‡πÅ‡∏•‡πâ‡∏ß",
        updatedCount: 0,
      };
    }

    console.log(`üîß ‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ${roomsToUpdate.length} ‡∏´‡πâ‡∏≠‡∏á`);
    roomsToUpdate.forEach((room) => {
      console.log(
        `   - ‡∏´‡πâ‡∏≠‡∏á ${room.room_number}: ${room.price} ‚Üí ${systemDepositRate}`
      );
    });

    // 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö system_settings
    const { error: updateError } = await supabase
      .from("rooms")
      .update({ price: systemDepositRate })
      .neq("id", "00000000-0000-0000-0000-000000000000"); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á

    if (updateError) {
      console.error("‚ùå Error updating room prices:", updateError);
      return { success: false, error: updateError.message };
    }

    console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${roomsToUpdate.length} ‡∏´‡πâ‡∏≠‡∏á`);

    return {
      success: true,
      message: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${roomsToUpdate.length} ‡∏´‡πâ‡∏≠‡∏á`,
      updatedCount: roomsToUpdate.length,
      newPrice: systemDepositRate,
    };
  } catch (error) {
    console.error(
      "‚ùå Unexpected error in syncRoomPricesWithSystemSettings:",
      error
    );
    return {
      success: false,
      error:
        error instanceof Error ? error.message : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î",
    };
  }
};

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
export const checkCurrentRoomPrices = async () => {
  try {
    console.log("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô...");

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• system_settings
    const { data: settingsData, error: settingsError } = await supabase
      .from("system_settings")
      .select("deposit_rate")
      .order("created_at", { ascending: false })
      .limit(1);

    if (settingsError) {
      console.error("‚ùå Error fetching system settings:", settingsError);
      return { success: false, error: settingsError.message };
    }

    const systemDepositRate = settingsData?.[0]?.deposit_rate || 0;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const { data: roomsData, error: roomsError } = await supabase
      .from("rooms")
      .select("id, room_number, price")
      .order("room_number", { ascending: true });

    if (roomsError) {
      console.error("‚ùå Error fetching rooms:", roomsError);
      return { success: false, error: roomsError.message };
    }

    const rooms = roomsData || [];
    const roomsWithDifferentPrice = rooms.filter(
      (room) => room.price !== systemDepositRate
    );

    return {
      success: true,
      systemDepositRate,
      totalRooms: rooms.length,
      roomsWithDifferentPrice: roomsWithDifferentPrice.length,
      rooms: rooms,
      differentPriceRooms: roomsWithDifferentPrice,
    };
  } catch (error) {
    console.error("‚ùå Unexpected error in checkCurrentRoomPrices:", error);
    return {
      success: false,
      error:
        error instanceof Error ? error.message : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î",
    };
  }
};
